---
# author: lework

- name: replication | Install MySQL-python package.
  yum: name={{ item }} state=latest
  with_items:
   - MySQL-python
  when: mysql_replication_role is defined and mysql_replication_role != ''

- name: replication | Ensure replication user exists on master.
  mysql_user:
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE') }}"
    config_file: "{{ mysql_cnf }}"
    state: present
  when:  >
    (mysql_replication_role == 'master')
    and mysql_replication_user

- name: replication | Check slave replication status.
  mysql_replication: mode=getslave config_file={{ mysql_cnf }}
  ignore_errors: true
  register: slave
  when: >
    mysql_replication_role == 'slave'
    and (mysql_replication_master != '')

- name: replication | Check master replication status.
  mysql_replication: mode="getmaster" config_file={{ mysql_cnf }}
  delegate_to: "{{ mysql_replication_master }}"
  register: master
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave|failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

- name: replication | Open relay log.
  replace: dest={{ mysql_cnf }} regexp={{ item.s }} replace={{ item.r }}
  with_items:
    #- {'s':'^log-bin =', 'r':'#log-bin ='}
    - {'s':'^#relay-log =','r':'relay-log ='}
    - {'s':'^#relay-log-info-file =','r':'relay-log-info-file ='}
    - {'s':'^#log-slave-updates','r':'log-slave-updates'}
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave|failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

- name: replication | Restart mysql service.
  shell: "{{ item }}" 
  with_items:
    - "{{ mysql_startsh }} stop  2>&1 > /dev/null"
    - "{{ mysql_startsh }} start  2>&1 > /dev/null" 
  ignore_errors: true
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave|failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

- name: replication | Wait for mysql start.
  wait_for: port={{ mysql_port }} delay=10
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave|failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

- name: replication | Show master status.
  debug: var={{ master | to_json }}
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave|failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

- name: replication | Configure replication on the slave.
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_replication_master }}"
    master_port: "{{ mysql_replication_master_port }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
    config_file: "{{ mysql_cnf }}"
  ignore_errors: True
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave|failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
    and mysql_replication_master

- name: replication | Start replication.
  mysql_replication: mode=startslave config_file={{ mysql_cnf }}
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave|failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
   
- name: replication | Get slave status.
  mysql_replication: mode=getslave config_file={{ mysql_cnf }}
  ignore_errors: true
  register: slave_status
  when: >
    ((slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave|failed))
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

- name: replication | Check slave replication status.
  debug: msg="Slave replication status is faild. Error:{{slave.Last_IO_Error}}"
  ignore_errors: true
  when: mysql_replication_role == 'slave' and slave_status.Slave_SQL_Running != 'Yes' and slave_status.Slave_IO_Running != 'Yes' and mysql_replication_master != ''
