---
# author: lework

- name: install | Check if tengine local file is already configured.
  stat: path={{ tengine_file_path }}
  connection: local
  register: tengine_file_result

- name: install | Create software files.
  file: path={{ software_files_path }} state=directory
  connection: local
  when: not tengine_file_result.stat.exists
  
- name: install | Download tengine file.
  get_url: url={{ tengine_file_url }} dest={{ software_files_path }} validate_certs=no
  connection: local
  when: not tengine_file_result.stat.exists

- name: install | Copy tengine file to agent.
  unarchive:
    src: "{{ tengine_file_path }}"
    dest: "/tmp"
    creates: "/tmp/tengine-{{ tengine_version }}"

- name: install | Ensure gcc packages are installed.
  package:
    name: "{{ item }}"
    state: installed
  with_items:
    - gcc
    - gcc-c++
    - libtool
    - make
    - libtool
    - zlib
    - zlib-devel
    - openssl
    - openssl-devel
    - pcre
    - pcre-devel
    - gd
    - gd-devel
    - libaio

- name: install | Create tengine group.
  group: name={{ tengine_group }}

- name: install | Create tengine user.
  user: name={{ tengine_user }} group={{ tengine_group }} shell=/sbin/nologin createhome=no

- name: install | Create tengine work Directory.
  file: path={{ item }} state=directory owner={{ tengine_user }} group={{ tengine_group }}
  with_items:
   - "{{ software_install_path }}/tengine-{{ tengine_version }}"
   - "{{ tengine_temp_path }}/client"
   - "{{ tengine_logpath }}"

- name: install | Check if tengine bin file is already configured.
  stat: path={{ software_install_path }}/tengine/sbin/nginx
  register: tengine_bin_result

- name: install | Build an install tengine.
  shell: "{{ item }}" 
  with_items:
    - "{{ tengine_configure_command }}"
    - make && make install
  args:
    chdir: "/tmp/tengine-{{ tengine_version }}/"
  when: not tengine_bin_result.stat.exists
  
- name: install | Set the owner of the tengine directory.
  file: path={{ software_install_path }}/tengine-{{ tengine_version }} state=directory owner={{ tengine_user }} group={{ tengine_group }} recurse=yes

- name: install | Create tengine dir soft link.
  file: src={{ software_install_path }}/tengine-{{ tengine_version }} dest={{ software_install_path }}/tengine owner={{ tengine_user }} group={{ tengine_group }} state=link
  
- name: install | Config environment variable.
  lineinfile: dest=/etc/profile line='export PATH={{ software_install_path }}/tengine/sbin/:$PATH'
